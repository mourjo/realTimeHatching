#version 330 core

// Input vertex data, different for all executions of this shader.
layout(location = 0) in vec3 vertexPosition_modelspace;
// Notice that the "1" here equals the "1" in glVertexAttribPointer
layout(location = 1) in vec3 vertexNormal_modelspace;
layout(location = 2) in vec2 vertexUV_modelspace;


// Values that stay constant for the whole mesh.
uniform mat4 MVP; //model-view-projection matrix


// Output data ; will be interpolated for each fragment.
out vec3 fragmentNormal;
out vec2 fragmentUV;
out mat4 MVP1;
out vec4 pos;


void main(){

	gl_Position =  MVP * vec4(vertexPosition_modelspace,1);
	pos = MVP * vec4(vertexPosition_modelspace,1);
	fragmentNormal = vertexNormal_modelspace;
	fragmentUV = vertexUV_modelspace;
	MVP1 = MVP;
}

