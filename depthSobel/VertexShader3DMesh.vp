#version 330 core

// Input vertex data, different for all executions of this shader.
layout(location = 0) in vec3 vertexPosition_modelspace;
// Notice that the "1" here equals the "1" in glVertexAttribPointer
layout(location = 1) in vec3 vertexNormal_modelspace;

// Values that stay constant for the whole mesh.
uniform mat4 depthMVP;
uniform mat4 MVP; //model-view-projection matrix

// Output data ; will be interpolated for each fragment.
out vec3 fragmentNormal;

out vec4 ShadowCoord;

void main(){
	mat4 biasMatrix = mat4(
		0.5, 0.0, 0.0, 0.0,
		0.0, 0.5, 0.0, 0.0,
		0.0, 0.0, 0.5, 0.0,
		0.5, 0.5, 0.5, 1.0
		);
		mat4 depthBiasMVP = biasMatrix*depthMVP; /*the ordering in CPP will be depthMVP*biasMatrix*/
	// Output position of the vertex, projected on screen
	gl_Position =  MVP * vec4(vertexPosition_modelspace,1);

	ShadowCoord = depthBiasMVP * vec4(vertexPosition_modelspace,1);


	// The normal of each vertex will be interpolated to produce the normal of each fragment
	fragmentNormal = vertexNormal_modelspace;

}

